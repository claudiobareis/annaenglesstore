<link rel="stylesheet" href="{{ 'component-list-menu.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-search.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-menu-drawer.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-cart-notification.css' | asset_url }}" media="print" onload="this.media='all'">

{%- if settings.predictive_search_enabled -%}
  <link rel="stylesheet" href="{{ 'component-price.css' | asset_url }}" media="print" onload="this.media='all'">
{%- endif -%}

{%- if section.settings.menu_type_desktop == 'mega' -%}
  <link rel="stylesheet" href="{{ 'component-mega-menu.css' | asset_url }}" media="print" onload="this.media='all'">
{%- endif -%}


<style>
  header-drawer {
    justify-self: start;
    margin-left: -1.2rem;
  }

  {%- if section.settings.sticky_header_type == 'reduce-logo-size' -%}
    .scrolled-past-header .header__heading-logo-wrapper {
      width: 75%;
    }
  {%- endif -%}

  {%- if section.settings.menu_type_desktop != "drawer" -%}
    @media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }
  {%- endif -%}

  .menu-drawer-container {
    display: flex;
  }

  .list-menu {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .list-menu--inline {
    display: inline-flex;
    flex-wrap: wrap;
  }

  summary.list-menu__item {
    padding-right: 2.7rem;
  }

  .list-menu__item {
    display: flex;
    align-items: center;
    line-height: calc(1 + 0.3 / var(--font-body-scale));
  }

  .list-menu__item--link {
    text-decoration: none;
    padding-bottom: 1rem;
    padding-top: 1rem;
    line-height: calc(1 + 0.8 / var(--font-body-scale));
  }

  @media screen and (min-width: 750px) {
    .list-menu__item--link {
      padding-bottom: 0.5rem;
      padding-top: 0.5rem;
    }
  }

  .header__special-links {
    display: flex;
    gap: 1.5rem;
    align-items: center;
    margin-right: 2rem;
  }
  .header__special-link {
    color: inherit;
    text-decoration: none;
    font-size: 1.1rem;
    font-weight: 500;
    transition: color 0.2s;
  }
  .header__special-link:hover {
    color: #000;
  }
  .header__special-link-icon {
    display: inline-flex;
    vertical-align: middle;
    margin-right: 0.4em;
    width: 1.2em;
    height: 1.2em;
  }
  
  /* Controle dos Ã­cones do carrinho */
  #cart-icon-bubble.cart-empty .svg-wrapper {
    display: none;
  }
  #cart-icon-bubble.cart-empty .svg-wrapper:first-child {
    display: inline-block;
  }
  #cart-icon-bubble.cart-filled .svg-wrapper:first-child {
    display: none;
  }
  #cart-icon-bubble.cart-filled .svg-wrapper:last-child {
    display: inline-block;
  }
  @media screen and (max-width: 750px) {
    .header__special-links {
      display: none;
    }
  }
</style>

{%- style -%}
  .header {
    padding: {{ section.settings.padding_top | times: 0.5 | round: 0 }}px 3rem {{ section.settings.padding_bottom | times: 0.5 | round: 0 }}px 3rem;
  }

  .section-header {
    position: sticky; /* This is for fixing a Safari z-index issue. PR #2147 */
    margin-bottom: {{ section.settings.margin_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-header {
      margin-bottom: {{ section.settings.margin_bottom }}px;
    }
  }

  @media screen and (min-width: 990px) {
    .header {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<script src="{{ 'cart-notification.js' | asset_url }}" defer="defer"></script>

{%- liquid
  for block in section.blocks
    if block.type == '@app'
      assign has_app_block = true
    endif
  endfor
-%}

<{% if section.settings.sticky_header_type != 'none' %}sticky-header data-sticky-type="{{ section.settings.sticky_header_type }}"{% else %}div{% endif %} class="header-wrapper color-{{ section.settings.color_scheme }} gradient{% if section.settings.show_line_separator %} header-wrapper--border-bottom{% endif %}">
  {%- liquid
    assign social_links = false
    assign localization_forms = false

    if settings.social_twitter_link != blank or settings.social_facebook_link != blank or settings.social_pinterest_link != blank or settings.social_instagram_link != blank or settings.social_youtube_link != blank or settings.social_vimeo_link != blank or settings.social_tiktok_link != blank or settings.social_tumblr_link != blank or settings.social_snapchat_link != blank
      assign social_links = true
    endif

    if localization.available_countries.size > 1 and section.settings.enable_country_selector or section.settings.enable_language_selector and localization.available_languages.size > 1
      assign localization_forms = true
    endif
  -%}
  <header class="header header--{{ section.settings.logo_position }} header--mobile-{{ section.settings.mobile_logo_position }} page-width{% if section.settings.menu_type_desktop == 'drawer' %} drawer-menu{% endif %}{% if section.settings.menu != blank %} header--has-menu{% endif %}{% if has_app_block %} header--has-app{% endif %}{% if social_links %} header--has-social{% endif %}{% if shop.customer_accounts_enabled %} header--has-account{% endif %}{% if localization_forms %} header--has-localizations{% endif %}">
    <div class="header__special-links">
      {% for i in (1..3) %}
        {% capture link_text_key %}special_link_{{ i }}_text{% endcapture %}
        {% capture link_url_key %}special_link_{{ i }}_url{% endcapture %}
        {% capture link_icon_key %}special_link_{{ i }}_icon{% endcapture %}
        {% assign link_text = section.settings[link_text_key] %}
        {% assign link_url = section.settings[link_url_key] %}
        {% assign link_icon = section.settings[link_icon_key] %}
        {% if link_url != blank and link_text != blank %}
          <a href="{{ link_url }}" class="header__special-link">
            {% if link_icon != blank %}
              <span class="header__special-link-icon">
                {% if link_icon contains '.svg' and link_icon contains 'http' %}
                  <img src="{{ link_icon }}" alt="" style="width: 100%; height: 100%;" loading="lazy">
                {% else %}
                  {{ link_icon | inline_asset_content }}
                {% endif %}
              </span>
            {% endif %}
            {{ link_text }}
          </a>
        {% endif %}
      {% endfor %}
    </div>
    {%- liquid
      if section.settings.menu != blank
        render 'header-drawer'
      endif

      # if section.settings.logo_position == 'top-center' or section.settings.menu == blank
      #   render 'header-search', input_id: 'Search-In-Modal-1'
      # endif
    -%}

    {%- if section.settings.logo_position != 'middle-center' -%}
      {%- if request.page_type == 'index' -%}
        <h1 class="header__heading">
      {%- endif -%}
          <a href="{{ routes.root_url }}" class="header__heading-link link link--text focus-inset">
            {%- if settings.logo != blank -%}
              <div class="header__heading-logo-wrapper">
                {%- assign logo_alt = settings.logo.alt | default: shop.name | escape -%}
                {%- assign logo_height = settings.logo_width | divided_by: settings.logo.aspect_ratio -%}
                {% capture sizes %}(max-width: {{ settings.logo_width | times: 2 }}px) 50vw, {{ settings.logo_width }}px{% endcapture %}
                {% capture widths %}{{ settings.logo_width }}, {{ settings.logo_width | times: 1.5 | round }}, {{ settings.logo_width | times: 2 }}{% endcapture %}
                {{ settings.logo | image_url: width: 600 | image_tag:
                  class: 'header__heading-logo motion-reduce',
                  widths: widths,
                  height: logo_height,
                  width: settings.logo_width,
                  alt: logo_alt,
                  sizes: sizes,
                  preload: true
                }}
              </div>
            {%- else -%}
              <span class="h2">{{ shop.name }}</span>
            {%- endif -%}
          </a>
      {%- if request.page_type == 'index' -%}
        </h1>
      {%- endif -%}
    {%- endif -%}

    {%- liquid
      if section.settings.menu != blank
        if section.settings.menu_type_desktop == 'dropdown'
          render 'header-dropdown-menu'
        elsif section.settings.menu_type_desktop != 'drawer'
          render 'header-mega-menu'
        endif
      endif
    %}

    {%- if section.settings.logo_position == 'middle-center' -%}
      {%- if request.page_type == 'index' -%}
        <h1 class="header__heading">
      {%- endif -%}
          <a href="{{ routes.root_url }}" class="header__heading-link link link--text focus-inset">
            {%- if settings.logo != blank -%}
              <div class="header__heading-logo-wrapper">
                {%- assign logo_alt = settings.logo.alt | default: shop.name | escape -%}
                {%- assign logo_height = settings.logo_width | divided_by: settings.logo.aspect_ratio -%}
                {% capture sizes %}(min-width: 750px) {{ settings.logo_width }}px, 50vw{% endcapture %}
                {% capture widths %}{{ settings.logo_width }}, {{ settings.logo_width | times: 1.5 | round }}, {{ settings.logo_width | times: 2 }}{% endcapture %}
                {{ settings.logo | image_url: width: 600 | image_tag:
                  class: 'header__heading-logo',
                  widths: widths,
                  height: logo_height,
                  width: settings.logo_width,
                  alt: logo_alt,
                  sizes: sizes,
                  preload: true
                }}
              </div>
            {%- else -%}
              <span class="h2">{{ shop.name }}</span>
            {%- endif -%}
          </a>
      {%- if request.page_type == 'index' -%}
        </h1>
      {%- endif -%}
    {%- endif -%}

    <div class="header__icons{% if section.settings.enable_country_selector or section.settings.enable_language_selector %} header__icons--localization header-localization{% endif %}">
      <div class="desktop-localization-wrapper">
        {%- if section.settings.enable_country_selector and localization.available_countries.size > 1 -%}
          <localization-form class="small-hide medium-hide" data-prevent-hide>
            {%- form 'localization', id: 'HeaderCountryForm', class: 'localization-form' -%}
              <div>
                <h2 class="visually-hidden" id="HeaderCountryLabel">{{ 'localization.country_label' | t }}</h2>
                {%- render 'country-localization', localPosition: 'HeaderCountry' -%}
              </div>
            {%- endform -%}
          </localization-form>
        {% endif %}

        {%- if section.settings.enable_language_selector and localization.available_languages.size > 1 -%}
          <localization-form class="small-hide medium-hide" data-prevent-hide>
            {%- form 'localization', id: 'HeaderLanguageForm', class: 'localization-form' -%}
              <div>
                <h2 class="visually-hidden" id="HeaderLanguageLabel">{{ 'localization.language_label' | t }}</h2>
                {%- render 'language-localization', localPosition: 'HeaderLanguage' -%}
              </div>
            {%- endform -%}
          </localization-form>
        {%- endif -%}
      </div>
      
      {% render 'header-search', input_id: 'Search-In-Modal' %}

      {% if settings.enable-wishlist %}
        <div class="header__action-item" style="position: relative; height: 23px;">
          <a class="header__action-item-link header__wishlist" href="/pages/wishlist">
            <svg width="25px" height="25px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <rect x="0" fill="none" width="24" height="24"/>      
                  
              <path d="M16.5 4.5c2.206 0 4 1.794 4 4 0 4.67-5.543 8.94-8.5 11.023C9.043 17.44 3.5 13.17 3.5 8.5c0-2.206 1.794-4 4-4 1.298 0 2.522.638 3.273 1.706L12 7.953l1.227-1.746c.75-1.07 1.975-1.707 3.273-1.707m0-1.5c-1.862 0-3.505.928-4.5 2.344C11.005 3.928 9.362 3 7.5 3 4.462 3 2 5.462 2 8.5c0 5.72 6.5 10.438 10 12.85 3.5-2.412 10-7.13 10-12.85C22 5.462 19.538 3 16.5 3z"/>
  
            </svg>
          </a>
        </div>
      {% endif %}

      {%- if shop.customer_accounts_enabled -%}
        <a
          href="{%- if customer -%}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{%- endif -%}"
          class="header__icon header__icon--account link focus-inset{% if section.settings.menu != blank %} small-hide{% endif %}"
          rel="nofollow"
        >
          {%- if section.settings.enable_customer_avatar -%}
            <account-icon>
              {%- if customer and customer.has_avatar? -%}
                {{ customer | avatar }}
              {%- else -%}
                <span class="svg-wrapper">{{ 'icon-account.svg' | inline_asset_content }}</span>
              {%- endif -%}
            </account-icon>
          {%- else -%}
            <span class="svg-wrapper">{{ 'icon-account.svg' | inline_asset_content }}</span>
          {%- endif -%}
          <span class="visually-hidden">
            {%- liquid
              if customer
                echo 'customer.account_fallback' | t
              else
                echo 'customer.log_in' | t
              endif
            -%}
          </span>
        </a>
      {%- endif -%}

      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when '@app' -%}
            {% render block %}
        {%- endcase -%}
      {%- endfor -%}

      <button type="button" class="header__icon header__icon--cart link focus-inset{% if cart == empty %} cart-empty{% else %} cart-filled{% endif %}" id="cart-icon-bubble" onclick="openCartNotification()">
          <span class="svg-wrapper">{{'icon-cart-empty.svg' | inline_asset_content }}</span>
          <span class="svg-wrapper">{{'icon-cart.svg' | inline_asset_content }}</span>
        <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
        {%- if cart != empty -%}
          <div class="cart-count-bubble">
            {%- if cart.item_count < 100 -%}
              <span aria-hidden="true">{{ cart.item_count }}</span>
            {%- endif -%}
            <span class="visually-hidden">{{ 'sections.header.cart_count' | t: count: cart.item_count }}</span>
          </div>
        {%- endif -%}
      </button>
    </div>
  </header>
</{% if section.settings.sticky_header_type != 'none' %}sticky-header{% else %}div{% endif %}>

{%- if settings.cart_type == "notification" -%}
  {%- render 'cart-notification', color_scheme: section.settings.color_scheme, desktop_menu_type: section.settings.menu_type_desktop -%}
{%- endif -%}

{%- render 'mini-cart' -%}

<script>
async function openCartNotification() {
  const miniCart = document.getElementById('mini-cart');
  if (!miniCart) {
    // Fallback: se nÃ£o houver mini-cart, vai para a pÃ¡gina do carrinho
    window.location.href = '{{ routes.cart_url }}';
    return;
  }

  // Sempre abrir o mini-cart primeiro
  miniCart.style.display = 'block';
  setTimeout(() => miniCart.classList.add('active'), 10);

  try {
    // Buscar dados atuais do carrinho
    console.log('Buscando dados do carrinho...');
    const response = await fetch(`${window.routes.cart_url}?section_id=main-cart-items`);
    const responseText = await response.text();
    console.log('Response recebida, tamanho:', responseText.length);
    console.log('Primeiros 500 chars da response:', responseText.substring(0, 500));
    
    const html = new DOMParser().parseFromString(responseText, 'text/html');
    const cartItems = html.querySelector('.js-contents');
    console.log('Elemento .js-contents encontrado:', !!cartItems);
    
    if (!cartItems) {
      // Se nÃ£o conseguir carregar, mostrar mensagem de carrinho vazio
      updateMiniCart('<div class="cart__warnings"><p>NÃ£o foi possÃ­vel carregar o carrinho</p></div>');
      return;
    }

    // Verificar se o carrinho estÃ¡ vazio
    const isEmpty = cartItems.querySelector('.cart__warnings') || cartItems.querySelector('.cart__empty-text');
    if (isEmpty) {
      // Mostrar carrinho vazio no mini-cart
      updateMiniCart('<div class="cart__warnings"><p>Carrinho vazio</p></div>');
      return;
    }

    // Atualizar o mini-cart com os dados atuais
    updateMiniCart(cartItems.innerHTML);
    
  } catch (error) {
    console.error('Erro ao carregar dados do carrinho:', error);
    // Mostrar erro no mini-cart em vez de redirecionar
    updateMiniCart('<div class="cart__warnings"><p>Erro ao carregar carrinho</p></div>');
  }
}

function closeMiniCart() {
  const miniCart = document.getElementById('mini-cart');
  if (miniCart) {
    miniCart.classList.remove('active');
    setTimeout(() => miniCart.style.display = 'none', 300);
  }
}

function updateMiniCart(cartContent) {
  const miniCartItems = document.getElementById('mini-cart-items');
  
  // Se cartContent Ã© uma string simples (caso de erro), tratar diretamente
  if (typeof cartContent === 'string' && cartContent.includes('cart__warnings')) {
    console.log('Detectado cart__warnings, mostrando carrinho vazio');
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">ð</div>
        <p>Seu carrinho estÃ¡ vazio</p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }
  
  const cartItems = new DOMParser().parseFromString(cartContent, 'text/html');
  
  // Verificar se hÃ¡ avisos de carrinho vazio
  const emptyWarning = cartItems.querySelector('.cart__warnings');
  
  if (emptyWarning) {
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">ð</div>
        <p>Seu carrinho estÃ¡ vazio</p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }
  
  const items = cartItems.querySelectorAll('tr.cart-item');
  
  // Debug: verificar quantos itens foram encontrados
  console.log('NÃºmero de itens encontrados:', items.length);
  console.log('HTML do carrinho:', cartItems.body ? cartItems.body.innerHTML.substring(0, 1000) : 'sem innerHTML');
  
  if (items.length === 0) {
    miniCartItems.innerHTML = `
      <div class="mini-cart__empty">
        <div class="mini-cart__empty-icon">ð</div>
        <p>Seu carrinho estÃ¡ vazio ou nÃ£o foi possÃ­vel carregar os itens</p>
        <p><small>Debug: Verifique o console para mais detalhes</small></p>
      </div>
    `;
    // Atualizar total para zero
    const totalElement = document.getElementById('mini-cart-total');
    if (totalElement) {
      totalElement.textContent = 'R$ 0,00';
    }
    return;
  }

  let html = '';
  let total = 0;
  
  items.forEach((item, index) => {
    // Extrair imagem
    const imageEl = item.querySelector('.cart-item__image');
    const image = imageEl ? imageEl.src : null;
    const imageAlt = imageEl ? imageEl.alt : '';
    
    // Extrair nome do produto
    const nameEl = item.querySelector('.cart-item__name');
    const name = nameEl ? nameEl.textContent.trim() : '';
    
    // Debug: log apenas se nÃ£o encontrar dados essenciais
    if (!name) {
      console.log('ERRO: Nome nÃ£o encontrado. Item HTML:', item.outerHTML.substring(0, 500));
    }
    
    // Extrair variantes/opÃ§Ãµes
    const options = item.querySelectorAll('.product-option');
    let variantText = '';
    options.forEach(option => {
      const text = option.textContent.trim();
      if (text && !text.includes('R$') && !text.includes('$')) {
        variantText += text + ' ';
      }
    });
    
    // Extrair quantidade primeiro
    const quantityEl = item.querySelector('.quantity__input') || item.querySelector('input[name="updates[]"]');
    const quantity = quantityEl ? parseInt(quantityEl.value) : 1;
    
    // Verificar se hÃ¡ desconto no item
    const discountedPricesEl = item.querySelector('.cart-item__discounted-prices');
    let priceText = '';
    let originalPriceText = '';
    let hasDiscount = false;
    
    if (discountedPricesEl) {
      // Item tem desconto
      hasDiscount = true;
      const originalPriceEl = discountedPricesEl.querySelector('.cart-item__old-price');
      const finalPriceEl = discountedPricesEl.querySelector('.cart-item__final-price');
      
      if (originalPriceEl && finalPriceEl) {
        originalPriceText = originalPriceEl.textContent.trim();
        priceText = finalPriceEl.textContent.trim();
      }
    } else {
      // Item sem desconto - buscar na div .product-option
      const priceEl = item.querySelector('.product-option');
      if (priceEl) {
        priceText = priceEl.textContent.trim();
      }
    }
    
    // Extrair preÃ§o total da linha (jÃ¡ calculado pelo Shopify)
    const linePriceEl = item.querySelector('.cart-item__totals .price--end:not(.cart-item__old-price)') || 
                       item.querySelector('.cart-item__totals .cart-item__discounted-prices .price--end:not(.cart-item__old-price)') ||
                       item.querySelector('.cart-item__totals span.price--end') ||
                       item.querySelector('.cart-item__totals .cart-item__discounted-prices dd.price--end');
    
    let itemTotal = 0;
    let linePriceText = '';
    
    if (linePriceEl) {
      linePriceText = linePriceEl.textContent.trim();
      // Extrair valor numÃ©rico do preÃ§o total da linha (formato brasileiro: R$ 1.600,00)
      const priceMatch = linePriceText.match(/[\d.]+,\d{2}/);
      if (priceMatch) {
        // Converter formato brasileiro para formato americano: 1.600,00 â 1600.00
        const brazilianPrice = priceMatch[0];
        const americanPrice = brazilianPrice.replace(/\./g, '').replace(',', '.');
        itemTotal = parseFloat(americanPrice);
      }
    } else {
      // Fallback: calcular manualmente se nÃ£o encontrar o preÃ§o da linha
      const unitPriceMatch = priceText.match(/[\d.]+,\d{2}/);
      if (unitPriceMatch) {
        const brazilianPrice = unitPriceMatch[0];
        const americanPrice = brazilianPrice.replace(/\./g, '').replace(',', '.');
        const unitPrice = parseFloat(americanPrice);
        itemTotal = unitPrice * quantity;
      }
    }
    
    total += itemTotal;
    
    // Extrair line number para remoÃ§Ã£o
    const lineNumber = index + 1;
    
    // Debug: verificar dados finais apenas se houver problema
    if (!name || !priceText) {
      console.log('ERRO: Dados incompletos:', { name, priceText, hasDiscount, originalPriceText, quantity, linePriceText });
    }
    
    if (name && priceText) {
      // Construir HTML do preÃ§o baseado se hÃ¡ desconto ou nÃ£o
      let priceHtml = '';
      if (hasDiscount && originalPriceText) {
        priceHtml = `
          <div class="mini-cart-item__price-wrapper">
            <p class="mini-cart-item__price-original"><s>${originalPriceText}</s></p>
            <p class="mini-cart-item__price">${priceText}</p>
          </div>
        `;
      } else {
        priceHtml = `<p class="mini-cart-item__price">${priceText}</p>`;
      }
      
      html += `
        <div class="mini-cart-item" data-line="${lineNumber}">
          ${image ? `<img src="${image}" alt="${imageAlt}" class="mini-cart-item__image">` : ''}
          <div class="mini-cart-item__details">
            <h3 class="mini-cart-item__name">${name}</h3>
            ${variantText ? `<p class="mini-cart-item__variant">${variantText.trim()}</p>` : ''}
            ${priceHtml}
            <p class="mini-cart-item__quantity">Qtd: ${quantity}</p>
            <p class="mini-cart-item__total">Total: ${linePriceText || `R$ ${itemTotal.toFixed(2).replace('.', ',')}`}</p>
          </div>
          <button class="mini-cart-item__remove" onclick="removeCartItem(${lineNumber})" title="Remover item">
            Ã
          </button>
        </div>
      `;
    }
  });
  
  miniCartItems.innerHTML = html;
  
  // Atualizar total
  const totalElement = document.getElementById('mini-cart-total');
  if (totalElement) {
    totalElement.textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
  }
}

async function removeCartItem(lineNumber) {
  try {
    const response = await fetch(`${window.routes.cart_change_url}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        line: lineNumber,
        quantity: 0
      })
    });

    if (response.ok) {
      // Recarregar o mini-cart apÃ³s remoÃ§Ã£o
      await openCartNotification();
    } else {
      console.error('Erro ao remover item do carrinho');
    }
  } catch (error) {
    console.error('Erro ao remover item:', error);
  }
}
</script>

{% javascript %}
  class StickyHeader extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.header = document.querySelector('.section-header');
      this.headerIsAlwaysSticky = this.getAttribute('data-sticky-type') === 'always' || this.getAttribute('data-sticky-type') === 'reduce-logo-size';
      this.headerBounds = {};

      this.setHeaderHeight();

      window.matchMedia('(max-width: 990px)').addEventListener('change', this.setHeaderHeight.bind(this));

      if (this.headerIsAlwaysSticky) {
        this.header.classList.add('shopify-section-header-sticky');
      };

      this.currentScrollTop = 0;
      this.preventReveal = false;
      this.predictiveSearch = this.querySelector('predictive-search');

      this.onScrollHandler = this.onScroll.bind(this);
      this.hideHeaderOnScrollUp = () => this.preventReveal = true;

      this.addEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.addEventListener('scroll', this.onScrollHandler, false);

      this.createObserver();
    }

    setHeaderHeight() {
      document.documentElement.style.setProperty('--header-height', `${this.header.offsetHeight}px`);
    }

    disconnectedCallback() {
      this.removeEventListener('preventHeaderReveal', this.hideHeaderOnScrollUp);
      window.removeEventListener('scroll', this.onScrollHandler);
    }

    createObserver() {
      let observer = new IntersectionObserver((entries, observer) => {
        this.headerBounds = entries[0].intersectionRect;
        observer.disconnect();
      });

      observer.observe(this.header);
    }

    onScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      if (this.predictiveSearch && this.predictiveSearch.isOpen) return;

      if (scrollTop > this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (this.preventHide) return;
        requestAnimationFrame(this.hide.bind(this));
      } else if (scrollTop < this.currentScrollTop && scrollTop > this.headerBounds.bottom) {
        this.header.classList.add('scrolled-past-header');
        if (!this.preventReveal) {
          requestAnimationFrame(this.reveal.bind(this));
        } else {
          window.clearTimeout(this.isScrolling);

          this.isScrolling = setTimeout(() => {
            this.preventReveal = false;
          }, 66);

          requestAnimationFrame(this.hide.bind(this));
        }
      } else if (scrollTop <= this.headerBounds.top) {
        this.header.classList.remove('scrolled-past-header');
        requestAnimationFrame(this.reset.bind(this));
      }

      this.currentScrollTop = scrollTop;
    }

    hide() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-hidden', 'shopify-section-header-sticky');
      this.closeMenuDisclosure();
      this.closeSearchModal();
    }

    reveal() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.add('shopify-section-header-sticky', 'animate');
      this.header.classList.remove('shopify-section-header-hidden');
    }

    reset() {
      if (this.headerIsAlwaysSticky) return;
      this.header.classList.remove('shopify-section-header-hidden', 'shopify-section-header-sticky', 'animate');
    }

    closeMenuDisclosure() {
      this.disclosures = this.disclosures || this.header.querySelectorAll('header-menu');
      this.disclosures.forEach(disclosure => disclosure.close());
    }

    closeSearchModal() {
      this.searchModal = this.searchModal || this.header.querySelector('details-modal');
      this.searchModal.close(false);
    }
  }

  customElements.define('sticky-header', StickyHeader);

  // FunÃ§Ã£o global para abrir o mini-cart com o conteÃºdo atual
  window.openCartNotification = function() {
    // Verificar se existe mini-cart customizado
    const miniCart = document.getElementById('mini-cart');
    if (miniCart) {
      // Abrir mini-cart customizado
      miniCart.style.display = 'block';
      setTimeout(() => miniCart.classList.add('active'), 10);
      
      // Carregar conteÃºdo do carrinho
      fetch(window.cartData.cartUrl + '.js')
        .then(response => response.json())
        .then(cartData => {
          // Atualizar contador do carrinho
          const cartCountBubble = document.querySelector('.cart-count-bubble span[aria-hidden="true"]');
          if (cartCountBubble) {
            cartCountBubble.textContent = cartData.item_count;
          }
          
          // Atualizar Ã­cone do carrinho baseado na quantidade
          const cartIcon = document.querySelector('#cart-icon-bubble');
          if (cartIcon) {
            if (cartData.item_count === 0) {
              cartIcon.classList.add('cart-empty');
              cartIcon.classList.remove('cart-filled');
            } else {
              cartIcon.classList.add('cart-filled');
              cartIcon.classList.remove('cart-empty');
            }
          }
          
          // Atualizar conteÃºdo do mini-cart
          updateMiniCartContent(cartData);
        })
        .catch(error => {
          console.error('Erro ao carregar carrinho:', error);
        });
      return;
    }
    
    // Fallback: usar cart-notification se mini-cart nÃ£o existir
    const cartNotification = document.querySelector('cart-notification');
    if (cartNotification) {
      if (window.cartData.itemCount === 0) {
        window.location.href = window.cartData.cartUrl;
        return;
      }
      cartNotification.open();
    } else {
      window.location.href = window.cartData.cartUrl;
    }
  };

  // FunÃ§Ã£o para atualizar o conteÃºdo do mini-cart
  function updateMiniCartContent(cartData) {
    const miniCartItems = document.getElementById('mini-cart-items');
    const totalElement = document.getElementById('mini-cart-total');
    
    if (!miniCartItems) return;
    
    if (cartData.item_count === 0) {
      miniCartItems.innerHTML = `
        <div class="mini-cart__empty">
          <div class="mini-cart__empty-icon">ð</div>
          <p>Seu carrinho estÃ¡ vazio</p>
        </div>
      `;
      if (totalElement) {
        totalElement.textContent = 'R$ 0,00';
      }
      return;
    }
    
    let html = '';
    let total = 0;
    
    cartData.items.forEach((item, index) => {
      const lineNumber = index + 1;
      const image = item.image;
      const imageAlt = item.image_alt || item.product_title;
      const name = item.product_title;
      const variantText = item.variant_title && item.variant_title !== 'Default Title' ? item.variant_title : '';
      const quantity = item.quantity;
      const price = item.price / 100;
      const itemTotal = price * quantity;
      total += itemTotal;
      
      const priceText = `R$ ${price.toFixed(2).replace('.', ',')}`;
      const linePriceText = `R$ ${itemTotal.toFixed(2).replace('.', ',')}`;
      
      html += `
        <div class="mini-cart-item" data-line="${lineNumber}">
          ${image ? `<img src="${image}" alt="${imageAlt}" class="mini-cart-item__image">` : ''}
          <div class="mini-cart-item__details">
            <h3 class="mini-cart-item__name">${name}</h3>
            ${variantText ? `<p class="mini-cart-item__variant">${variantText}</p>` : ''}
            <p class="mini-cart-item__price">${priceText}</p>
            <p class="mini-cart-item__quantity">Qtd: ${quantity}</p>
            <p class="mini-cart-item__total">Total: ${linePriceText}</p>
          </div>
          <button class="mini-cart-item__remove" onclick="removeCartItem(${lineNumber})" title="Remover item">
            Ã
          </button>
        </div>
      `;
    });
    
    miniCartItems.innerHTML = html;
    
    if (totalElement) {
      totalElement.textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
    }
  }
{% endjavascript %}

<script>
  // VariÃ¡veis globais para o carrinho
  window.cartData = {
    itemCount: {{ cart.item_count }},
    cartUrl: '{{ routes.cart_url }}'
  };

  // FunÃ§Ã£o para atualizar as variÃ¡veis do carrinho
  window.updateCartData = function(itemCount) {
    window.cartData.itemCount = itemCount;
  };
</script>

<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": {{ shop.name | json }},
    {% if settings.logo %}
      "logo": {{ settings.logo | image_url: width: 500 | prepend: "https:" | json }},
    {% endif %}
    "sameAs": [
      {{ settings.social_twitter_link | json }},
      {{ settings.social_facebook_link | json }},
      {{ settings.social_pinterest_link | json }},
      {{ settings.social_instagram_link | json }},
      {{ settings.social_tiktok_link | json }},
      {{ settings.social_tumblr_link | json }},
      {{ settings.social_snapchat_link | json }},
      {{ settings.social_youtube_link | json }},
      {{ settings.social_vimeo_link | json }}
    ],
    "url": {{ request.origin | append: page.url | json }}
  }
</script>

{%- if request.page_type == 'index' -%}
  {% assign potential_action_target = request.origin | append: routes.search_url | append: "?q={search_term_string}" %}
  <script type="application/ld+json">
    {
      "@context": "http://schema.org",
      "@type": "WebSite",
      "name": {{ shop.name | json }},
      "potentialAction": {
        "@type": "SearchAction",
        "target": {{ potential_action_target | json }},
        "query-input": "required name=search_term_string"
      },
      "url": {{ request.origin | append: page.url | json }}
    }
  </script>
{%- endif -%}

{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "max_blocks": 3,
  "settings": [
    {
      "type": "select",
      "id": "logo_position",
      "options": [
        {
          "value": "top-left",
          "label": "t:sections.header.settings.logo_position.options__2.label"
        },
        {
          "value": "top-center",
          "label": "t:sections.header.settings.logo_position.options__3.label"
        },
        {
          "value": "middle-left",
          "label": "t:sections.header.settings.logo_position.options__1.label"
        },
        {
          "value": "middle-center",
          "label": "t:sections.header.settings.logo_position.options__4.label"
        }
      ],
      "default": "middle-left",
      "label": "t:sections.header.settings.logo_position.label",
      "info": "t:sections.header.settings.logo_help.content"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "select",
      "id": "menu_type_desktop",
      "options": [
        {
          "value": "dropdown",
          "label": "t:sections.header.settings.menu_type_desktop.options__1.label"
        },
        {
          "value": "mega",
          "label": "t:sections.header.settings.menu_type_desktop.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.header.settings.menu_type_desktop.options__3.label"
        }
      ],
      "default": "dropdown",
      "label": "t:sections.header.settings.menu_type_desktop.label",
      "info": "t:sections.header.settings.menu_type_desktop.info"
    },
    {
      "type": "select",
      "id": "sticky_header_type",
      "options": [
        {
          "value": "none",
          "label": "t:sections.header.settings.sticky_header_type.options__1.label"
        },
        {
          "value": "on-scroll-up",
          "label": "t:sections.header.settings.sticky_header_type.options__2.label"
        },
        {
          "value": "always",
          "label": "t:sections.header.settings.sticky_header_type.options__3.label"
        },
        {
          "value": "reduce-logo-size",
          "label": "t:sections.header.settings.sticky_header_type.options__4.label"
        }
      ],
      "default": "on-scroll-up",
      "label": "t:sections.header.settings.sticky_header_type.label"
    },
    {
      "type": "checkbox",
      "id": "show_line_separator",
      "default": true,
      "label": "t:sections.header.settings.show_line_separator.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__1.content"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "color_scheme",
      "id": "menu_color_scheme",
      "label": "t:sections.header.settings.menu_color_scheme.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__3.content",
      "info": "t:sections.header.settings.header__4.info"
    },
    {
      "type": "checkbox",
      "id": "enable_country_selector",
      "default": false,
      "label": "t:sections.header.settings.enable_country_selector.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__5.content",
      "info": "t:sections.header.settings.header__6.info"
    },
    {
      "type": "checkbox",
      "id": "enable_language_selector",
      "default": false,
      "label": "t:sections.header.settings.enable_language_selector.label"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header__7.content",
      "info": "t:sections.header.settings.header__7.info"
    },
    {
      "type": "checkbox",
      "id": "enable_customer_avatar",
      "default": true,
      "label": "t:sections.header.settings.enable_customer_avatar.label",
      "info": "t:sections.header.settings.enable_customer_avatar.info"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.mobile_layout.content"
    },
    {
      "type": "select",
      "id": "mobile_logo_position",
      "options": [
        {
          "value": "center",
          "label": "t:sections.header.settings.mobile_logo_position.options__1.label"
        },
        {
          "value": "left",
          "label": "t:sections.header.settings.mobile_logo_position.options__2.label"
        }
      ],
      "default": "center",
      "label": "t:sections.header.settings.mobile_logo_position.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.header.settings.margin_bottom.label",
      "default": 0
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 20
    },
    {
      "type": "header",
      "content": "Links Especiais"
    },
    {
      "type": "text",
      "id": "special_link_1_text",
      "label": "Texto do link especial 01",
      "default": "Link Especial 01"
    },
    {
      "type": "url",
      "id": "special_link_1_url",
      "label": "URL do link especial 01"
    },
    {
      "type": "text",
      "id": "special_link_1_icon",
      "label": "Ãcone SVG ou nome do asset (opcional) do link 01",
      "default": "icon-star.svg"
    },
    {
      "type": "text",
      "id": "special_link_2_text",
      "label": "Texto do link especial 02",
      "default": "Link Especial 02"
    },
    {
      "type": "url",
      "id": "special_link_2_url",
      "label": "URL do link especial 02"
    },
    {
      "type": "text",
      "id": "special_link_2_icon",
      "label": "Ãcone SVG ou nome do asset (opcional) do link 02",
      "default": "icon-heart.svg"
    },
    {
      "type": "text",
      "id": "special_link_3_text",
      "label": "Texto do link especial 03",
      "default": "Link Especial 03"
    },
    {
      "type": "url",
      "id": "special_link_3_url",
      "label": "URL do link especial 03"
    },
    {
      "type": "text",
      "id": "special_link_3_icon",
      "label": "Ãcone SVG ou nome do asset (opcional) do link 03",
      "default": "icon-info.svg"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    }
  ],
  "presets": [
    {
      "name": "t:sections.header.presets.name"
    }
  ]
}
{% endschema %}
